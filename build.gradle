plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

//存储构建信息到META-INF/build-info.properties文件，该文件会被BuildProperties对象解析，暴露在/actuator/info端点
springBoot {
    buildInfo()
}

//注解处理器
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    // spring cloud的版本
    set('springCloudVersion', "2021.0.8")
    // 指定Testcontainers版本，用于配置测试用、轻量级的postgreSql容器
    set('testcontainersVersion',"1.19.3")
    // Testcontainers Keycloak版本
    set('testKeycloakVersion',"3.2.0")
    // OpenTelemetry版本
    set('otelVersion',"1.17.0")
}

dependencies {
    //引入lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30','org.springframework.boot:spring-boot-configuration-processor'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    // 使用spring cloud config client
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    // 使用重试模式
    implementation 'org.springframework.retry:spring-retry'
    // 配置刷新、健康检测
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    // 集成Grafana观测工具prometheus，用于收集和存储应用metrics度量信息
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // 引入spring data jdbc
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    // 提供postgreSql驱动
    runtimeOnly 'org.postgresql:postgresql'
    // OpenTelemetry代理会通过字节码动态插装Java代码
    runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

    //引入flyway
    implementation 'org.flywaydb:flyway-core'
    // 引入OAuth2资源服务器
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //响应式web框架webflux
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    // 容器化管理测试用postgreSql数据库
    testImplementation 'org.testcontainers:postgresql'
    // 引入OAuth2测试类
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    // 提供keycloak测试工具
    testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}"
}

dependencyManagement {
    imports {
        // spring cloud依赖管理的BOM
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// 使用buildpacks构建docker镜像的配置
bootBuildImage {
    builder = "docker.io/paketobuildpacks/builder-jammy-base:0.4.302"
    // 没有指定label，默认latest
    imageName = "${project.name}"
    // 指定java版本
    environment = ["BP_JVM_VERSION" : "17.*"]

    // 构建镜像时，同时推送至远程容器注册中心
//    docker {
//        publishRegistry {
//            username = project.findProperty("registryUsername")
//            password = project.findProperty("registryToken")
//            // 启动参数形式无法识别为字符串
//            url = "ghcr.io"
//        }
//    }
}
